AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A bastian host, connect to Jumpcloud, and associate with a jumpcloud systems group.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: "scicomp"
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  VpcSubnet:
    Description: Name of an existing VPC subnet to run the instance in.
    Type: String
    Default: PrivateSubnet
    ConstraintDescription: >-
      Allowed values (PrivateSubnet, PrivateSubnet1, PrivateSubnet2, PublicSubnet, PublicSubnet1, PublicSubnet2)
    AllowedValues:
      - PrivateSubnet
      - PrivateSubnet1
      - PrivateSubnet2
      - PublicSubnet
      - PublicSubnet1
      - PublicSubnet2
  VpcName:
    Description: Name of an existing VPC to run the instance in.
    Type: String
  Environment:
    Description: The application environment
    Type: String
    AllowedValues:
      - develop
      - staging
      - prod
  AMIId:
    Description: ID of the AMI to deploy
    Type: AWS::EC2::Image::Id
Conditions:
  PublicEc2Resources: !Or [!Equals [ !Ref VpcSubnet, PublicSubnet ], !Equals [ !Ref VpcSubnet, PublicSubnet1 ], !Equals [ !Ref VpcSubnet, PublicSubnet2 ] ]
Resources:
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      PropagateTagsToVolumeOnCreation: true
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !ImportValue
        'Fn::Sub': '${AWS::Region}-${VpcName}-${VpcSubnet}'
      SecurityGroupIds:
        - !ImportValue
          'Fn::Sub': '${AWS::Region}-agora-docdb-${Environment}-DocumentDbAccessSecurityGroup'
      Tags:
        - Key: "ManagedInstanceMaintenanceTarget"
          Value: "yes"
        - Key: "PatchGroup"
          Value: "prod-default"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com #For maintenance service
            Action:
              - sts:AssumeRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

Outputs:
  Ec2InstanceId:
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstanceId'
  Ec2InstancePrivateIp:
    Value: !GetAtt Ec2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePrivateIp'
  Ec2InstancePublicIp:
    Condition: PublicEc2Resources
    Value: !GetAtt Ec2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePublicIp'
